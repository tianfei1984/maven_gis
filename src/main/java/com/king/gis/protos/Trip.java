// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/trip.proto

package com.king.gis.protos;

public final class Trip {
  private Trip() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public static final class Point extends
      com.google.protobuf.GeneratedMessage {
    // Use Point.newBuilder() to construct.
    private Point() {
      initFields();
    }
    private Point(boolean noInit) {}
    
    private static final Point defaultInstance;
    public static Point getDefaultInstance() {
      return defaultInstance;
    }
    
    public Point getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.king.gis.protos.Trip.internal_static_Point_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.king.gis.protos.Trip.internal_static_Point_fieldAccessorTable;
    }
    
    // required double x = 1;
    public static final int X_FIELD_NUMBER = 1;
    private boolean hasX;
    private double x_ = 0D;
    public boolean hasX() { return hasX; }
    public double getX() { return x_; }
    
    // required double y = 2;
    public static final int Y_FIELD_NUMBER = 2;
    private boolean hasY;
    private double y_ = 0D;
    public boolean hasY() { return hasY; }
    public double getY() { return y_; }
    
    // required int32 index = 3;
    public static final int INDEX_FIELD_NUMBER = 3;
    private boolean hasIndex;
    private int index_ = 0;
    public boolean hasIndex() { return hasIndex; }
    public int getIndex() { return index_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      if (!hasX) return false;
      if (!hasY) return false;
      if (!hasIndex) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasX()) {
        output.writeDouble(1, getX());
      }
      if (hasY()) {
        output.writeDouble(2, getY());
      }
      if (hasIndex()) {
        output.writeInt32(3, getIndex());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasX()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, getX());
      }
      if (hasY()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, getY());
      }
      if (hasIndex()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getIndex());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.king.gis.protos.Trip.Point parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.king.gis.protos.Trip.Point parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.king.gis.protos.Trip.Point parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.king.gis.protos.Trip.Point parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.king.gis.protos.Trip.Point parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.king.gis.protos.Trip.Point parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.king.gis.protos.Trip.Point parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.king.gis.protos.Trip.Point parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.king.gis.protos.Trip.Point parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.king.gis.protos.Trip.Point parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.king.gis.protos.Trip.Point prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.king.gis.protos.Trip.Point result;
      
      // Construct using com.king.gis.protos.Trip.Point.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.king.gis.protos.Trip.Point();
        return builder;
      }
      
      protected com.king.gis.protos.Trip.Point internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.king.gis.protos.Trip.Point();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.king.gis.protos.Trip.Point.getDescriptor();
      }
      
      public com.king.gis.protos.Trip.Point getDefaultInstanceForType() {
        return com.king.gis.protos.Trip.Point.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.king.gis.protos.Trip.Point build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.king.gis.protos.Trip.Point buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.king.gis.protos.Trip.Point buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.king.gis.protos.Trip.Point returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.king.gis.protos.Trip.Point) {
          return mergeFrom((com.king.gis.protos.Trip.Point)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.king.gis.protos.Trip.Point other) {
        if (other == com.king.gis.protos.Trip.Point.getDefaultInstance()) return this;
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 9: {
              setX(input.readDouble());
              break;
            }
            case 17: {
              setY(input.readDouble());
              break;
            }
            case 24: {
              setIndex(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // required double x = 1;
      public boolean hasX() {
        return result.hasX();
      }
      public double getX() {
        return result.getX();
      }
      public Builder setX(double value) {
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder clearX() {
        result.hasX = false;
        result.x_ = 0D;
        return this;
      }
      
      // required double y = 2;
      public boolean hasY() {
        return result.hasY();
      }
      public double getY() {
        return result.getY();
      }
      public Builder setY(double value) {
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder clearY() {
        result.hasY = false;
        result.y_ = 0D;
        return this;
      }
      
      // required int32 index = 3;
      public boolean hasIndex() {
        return result.hasIndex();
      }
      public int getIndex() {
        return result.getIndex();
      }
      public Builder setIndex(int value) {
        result.hasIndex = true;
        result.index_ = value;
        return this;
      }
      public Builder clearIndex() {
        result.hasIndex = false;
        result.index_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:Point)
    }
    
    static {
      defaultInstance = new Point(true);
      com.king.gis.protos.Trip.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:Point)
  }
  
  public static final class TripModel extends
      com.google.protobuf.GeneratedMessage {
    // Use TripModel.newBuilder() to construct.
    private TripModel() {
      initFields();
    }
    private TripModel(boolean noInit) {}
    
    private static final TripModel defaultInstance;
    public static TripModel getDefaultInstance() {
      return defaultInstance;
    }
    
    public TripModel getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.king.gis.protos.Trip.internal_static_TripModel_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.king.gis.protos.Trip.internal_static_TripModel_fieldAccessorTable;
    }
    
    // repeated .Point points = 1;
    public static final int POINTS_FIELD_NUMBER = 1;
    private java.util.List<com.king.gis.protos.Trip.Point> points_ =
      java.util.Collections.emptyList();
    public java.util.List<com.king.gis.protos.Trip.Point> getPointsList() {
      return points_;
    }
    public int getPointsCount() { return points_.size(); }
    public com.king.gis.protos.Trip.Point getPoints(int index) {
      return points_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      for (com.king.gis.protos.Trip.Point element : getPointsList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (com.king.gis.protos.Trip.Point element : getPointsList()) {
        output.writeMessage(1, element);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (com.king.gis.protos.Trip.Point element : getPointsList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.king.gis.protos.Trip.TripModel parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.king.gis.protos.Trip.TripModel parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.king.gis.protos.Trip.TripModel parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.king.gis.protos.Trip.TripModel parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.king.gis.protos.Trip.TripModel parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.king.gis.protos.Trip.TripModel parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.king.gis.protos.Trip.TripModel parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.king.gis.protos.Trip.TripModel parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.king.gis.protos.Trip.TripModel parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.king.gis.protos.Trip.TripModel parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.king.gis.protos.Trip.TripModel prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> {
      private com.king.gis.protos.Trip.TripModel result;
      
      // Construct using com.king.gis.protos.Trip.TripModel.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.king.gis.protos.Trip.TripModel();
        return builder;
      }
      
      protected com.king.gis.protos.Trip.TripModel internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.king.gis.protos.Trip.TripModel();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.king.gis.protos.Trip.TripModel.getDescriptor();
      }
      
      public com.king.gis.protos.Trip.TripModel getDefaultInstanceForType() {
        return com.king.gis.protos.Trip.TripModel.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.king.gis.protos.Trip.TripModel build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.king.gis.protos.Trip.TripModel buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.king.gis.protos.Trip.TripModel buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.points_ != java.util.Collections.EMPTY_LIST) {
          result.points_ =
            java.util.Collections.unmodifiableList(result.points_);
        }
        com.king.gis.protos.Trip.TripModel returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.king.gis.protos.Trip.TripModel) {
          return mergeFrom((com.king.gis.protos.Trip.TripModel)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(com.king.gis.protos.Trip.TripModel other) {
        if (other == com.king.gis.protos.Trip.TripModel.getDefaultInstance()) return this;
        if (!other.points_.isEmpty()) {
          if (result.points_.isEmpty()) {
            result.points_ = new java.util.ArrayList<com.king.gis.protos.Trip.Point>();
          }
          result.points_.addAll(other.points_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              com.king.gis.protos.Trip.Point.Builder subBuilder = com.king.gis.protos.Trip.Point.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addPoints(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // repeated .Point points = 1;
      public java.util.List<com.king.gis.protos.Trip.Point> getPointsList() {
        return java.util.Collections.unmodifiableList(result.points_);
      }
      public int getPointsCount() {
        return result.getPointsCount();
      }
      public com.king.gis.protos.Trip.Point getPoints(int index) {
        return result.getPoints(index);
      }
      public Builder setPoints(int index, com.king.gis.protos.Trip.Point value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.points_.set(index, value);
        return this;
      }
      public Builder setPoints(int index, com.king.gis.protos.Trip.Point.Builder builderForValue) {
        result.points_.set(index, builderForValue.build());
        return this;
      }
      public Builder addPoints(com.king.gis.protos.Trip.Point value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.points_.isEmpty()) {
          result.points_ = new java.util.ArrayList<com.king.gis.protos.Trip.Point>();
        }
        result.points_.add(value);
        return this;
      }
      public Builder addPoints(com.king.gis.protos.Trip.Point.Builder builderForValue) {
        if (result.points_.isEmpty()) {
          result.points_ = new java.util.ArrayList<com.king.gis.protos.Trip.Point>();
        }
        result.points_.add(builderForValue.build());
        return this;
      }
      public Builder addAllPoints(
          java.lang.Iterable<? extends com.king.gis.protos.Trip.Point> values) {
        if (result.points_.isEmpty()) {
          result.points_ = new java.util.ArrayList<com.king.gis.protos.Trip.Point>();
        }
        super.addAll(values, result.points_);
        return this;
      }
      public Builder clearPoints() {
        result.points_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:TripModel)
    }
    
    static {
      defaultInstance = new TripModel(true);
      com.king.gis.protos.Trip.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:TripModel)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Point_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Point_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_TripModel_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_TripModel_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021protos/trip.proto\",\n\005Point\022\t\n\001x\030\001 \002(\001\022" +
      "\t\n\001y\030\002 \002(\001\022\r\n\005index\030\003 \002(\005\"#\n\tTripModel\022\026" +
      "\n\006points\030\001 \003(\0132\006.PointB\025\n\023com.king.gis.p" +
      "rotos"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_Point_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_Point_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Point_descriptor,
              new java.lang.String[] { "X", "Y", "Index", },
              com.king.gis.protos.Trip.Point.class,
              com.king.gis.protos.Trip.Point.Builder.class);
          internal_static_TripModel_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_TripModel_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_TripModel_descriptor,
              new java.lang.String[] { "Points", },
              com.king.gis.protos.Trip.TripModel.class,
              com.king.gis.protos.Trip.TripModel.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
